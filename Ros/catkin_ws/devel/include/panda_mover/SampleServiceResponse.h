// Generated by gencpp from file panda_mover/SampleServiceResponse.msg
// DO NOT EDIT!


#ifndef PANDA_MOVER_MESSAGE_SAMPLESERVICERESPONSE_H
#define PANDA_MOVER_MESSAGE_SAMPLESERVICERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace panda_mover
{
template <class ContainerAllocator>
struct SampleServiceResponse_
{
  typedef SampleServiceResponse_<ContainerAllocator> Type;

  SampleServiceResponse_()
    : output_msg()
    , sampled_trajectory()  {
    }
  SampleServiceResponse_(const ContainerAllocator& _alloc)
    : output_msg(_alloc)
    , sampled_trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _output_msg_type;
  _output_msg_type output_msg;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _sampled_trajectory_type;
  _sampled_trajectory_type sampled_trajectory;





  typedef boost::shared_ptr< ::panda_mover::SampleServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_mover::SampleServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SampleServiceResponse_

typedef ::panda_mover::SampleServiceResponse_<std::allocator<void> > SampleServiceResponse;

typedef boost::shared_ptr< ::panda_mover::SampleServiceResponse > SampleServiceResponsePtr;
typedef boost::shared_ptr< ::panda_mover::SampleServiceResponse const> SampleServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_mover::SampleServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_mover::SampleServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_mover::SampleServiceResponse_<ContainerAllocator1> & lhs, const ::panda_mover::SampleServiceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.output_msg == rhs.output_msg &&
    lhs.sampled_trajectory == rhs.sampled_trajectory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_mover::SampleServiceResponse_<ContainerAllocator1> & lhs, const ::panda_mover::SampleServiceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_mover

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panda_mover::SampleServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_mover::SampleServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_mover::SampleServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_mover::SampleServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_mover::SampleServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_mover::SampleServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_mover::SampleServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00586cb897008f318cddf6b335d18c39";
  }

  static const char* value(const ::panda_mover::SampleServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00586cb897008f31ULL;
  static const uint64_t static_value2 = 0x8cddf6b335d18c39ULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_mover::SampleServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_mover/SampleServiceResponse";
  }

  static const char* value(const ::panda_mover::SampleServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_mover::SampleServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string output_msg\n"
"geometry_msgs/Pose[] sampled_trajectory\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::panda_mover::SampleServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_mover::SampleServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output_msg);
      stream.next(m.sampled_trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SampleServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_mover::SampleServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_mover::SampleServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "output_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.output_msg);
    s << indent << "sampled_trajectory[]" << std::endl;
    for (size_t i = 0; i < v.sampled_trajectory.size(); ++i)
    {
      s << indent << "  sampled_trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.sampled_trajectory[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_MOVER_MESSAGE_SAMPLESERVICERESPONSE_H

//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.BaxterCore
{
    [Serializable]
    public class SolvePositionIKResponse : Message
    {
        public const string k_RosMessageName = "baxter_core_msgs/SolvePositionIK";
        public override string RosMessageName => k_RosMessageName;

        //  joints[i]      == joint angle solution for each pose_state[i]
        public Sensor.JointStateMsg[] joints;
        //  NOTE: isValid will be deprecated by result_type in future versions
        public bool[] isValid;
        //  result_type[i] == seed type used to find valid solution, joints[i];
        //  otherwise,     == RESULT_INVALID (no valid solution found).
        public const byte RESULT_INVALID = 0;
        public byte[] result_type;

        public SolvePositionIKResponse()
        {
            this.joints = new Sensor.JointStateMsg[0];
            this.isValid = new bool[0];
            this.result_type = new byte[0];
        }

        public SolvePositionIKResponse(Sensor.JointStateMsg[] joints, bool[] isValid, byte[] result_type)
        {
            this.joints = joints;
            this.isValid = isValid;
            this.result_type = result_type;
        }

        public static SolvePositionIKResponse Deserialize(MessageDeserializer deserializer) => new SolvePositionIKResponse(deserializer);

        private SolvePositionIKResponse(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.joints, Sensor.JointStateMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.isValid, sizeof(bool), deserializer.ReadLength());
            deserializer.Read(out this.result_type, sizeof(byte), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.joints);
            serializer.Write(this.joints);
            serializer.WriteLength(this.isValid);
            serializer.Write(this.isValid);
            serializer.WriteLength(this.result_type);
            serializer.Write(this.result_type);
        }

        public override string ToString()
        {
            return "SolvePositionIKResponse: " +
            "\njoints: " + System.String.Join(", ", joints.ToList()) +
            "\nisValid: " + System.String.Join(", ", isValid.ToList()) +
            "\nresult_type: " + System.String.Join(", ", result_type.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize, MessageSubtopic.Response);
        }
    }
}

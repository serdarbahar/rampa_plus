//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.BaxterCore
{
    [Serializable]
    public class SEAJointStateMsg : Message
    {
        public const string k_RosMessageName = "baxter_core_msgs/SEAJointState";
        public override string RosMessageName => k_RosMessageName;

        //  This is a message that holds data to describe the state of a set of torque controlled joints.
        // 
        //  The state of each joint (revolute or prismatic) is defined by:
        //   * the position of the joint (rad or m),
        //   * the velocity of the joint (rad/s or m/s) and
        //   * the effort that is applied in the joint (Nm or N).
        // 
        //  Each joint is uniquely identified by its name
        //  The header specifies the time at which the joint states were recorded. All the joint states
        //  in one message have to be recorded at the same time.
        // 
        //  This message consists of a multiple arrays, one for each part of the joint state.
        //  The goal is to make each of the fields optional. When e.g. your joints have no
        //  effort associated with them, you can leave the effort array empty.
        // 
        //  All arrays in this message should have the same size, or be empty.
        //  This is the only way to uniquely associate the joint name with the correct
        //  states.
        public HeaderMsg header;
        public string[] name;
        public double[] commanded_position;
        public double[] commanded_velocity;
        public double[] commanded_acceleration;
        public double[] commanded_effort;
        public double[] actual_position;
        public double[] actual_velocity;
        public double[] actual_effort;
        //  This includes the inertial feed forward torques when applicable.
        public double[] gravity_model_effort;
        //  This is the torque required to hold the arm against gravity returned by KDL
        //  if the arm was stationary.  This does not include inertial feed forward
        //  torques (even when we have them) or any of the corrections (i.e. spring
        //  hysteresis, crosstalk, etc) we make to the KDL model.
        public double[] gravity_only;
        public double[] hysteresis_model_effort;
        public double[] crosstalk_model_effort;
        public double hystState;

        public SEAJointStateMsg()
        {
            this.header = new HeaderMsg();
            this.name = new string[0];
            this.commanded_position = new double[0];
            this.commanded_velocity = new double[0];
            this.commanded_acceleration = new double[0];
            this.commanded_effort = new double[0];
            this.actual_position = new double[0];
            this.actual_velocity = new double[0];
            this.actual_effort = new double[0];
            this.gravity_model_effort = new double[0];
            this.gravity_only = new double[0];
            this.hysteresis_model_effort = new double[0];
            this.crosstalk_model_effort = new double[0];
            this.hystState = 0.0;
        }

        public SEAJointStateMsg(HeaderMsg header, string[] name, double[] commanded_position, double[] commanded_velocity, double[] commanded_acceleration, double[] commanded_effort, double[] actual_position, double[] actual_velocity, double[] actual_effort, double[] gravity_model_effort, double[] gravity_only, double[] hysteresis_model_effort, double[] crosstalk_model_effort, double hystState)
        {
            this.header = header;
            this.name = name;
            this.commanded_position = commanded_position;
            this.commanded_velocity = commanded_velocity;
            this.commanded_acceleration = commanded_acceleration;
            this.commanded_effort = commanded_effort;
            this.actual_position = actual_position;
            this.actual_velocity = actual_velocity;
            this.actual_effort = actual_effort;
            this.gravity_model_effort = gravity_model_effort;
            this.gravity_only = gravity_only;
            this.hysteresis_model_effort = hysteresis_model_effort;
            this.crosstalk_model_effort = crosstalk_model_effort;
            this.hystState = hystState;
        }

        public static SEAJointStateMsg Deserialize(MessageDeserializer deserializer) => new SEAJointStateMsg(deserializer);

        private SEAJointStateMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.name, deserializer.ReadLength());
            deserializer.Read(out this.commanded_position, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.commanded_velocity, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.commanded_acceleration, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.commanded_effort, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.actual_position, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.actual_velocity, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.actual_effort, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.gravity_model_effort, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.gravity_only, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.hysteresis_model_effort, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.crosstalk_model_effort, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.hystState);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.WriteLength(this.name);
            serializer.Write(this.name);
            serializer.WriteLength(this.commanded_position);
            serializer.Write(this.commanded_position);
            serializer.WriteLength(this.commanded_velocity);
            serializer.Write(this.commanded_velocity);
            serializer.WriteLength(this.commanded_acceleration);
            serializer.Write(this.commanded_acceleration);
            serializer.WriteLength(this.commanded_effort);
            serializer.Write(this.commanded_effort);
            serializer.WriteLength(this.actual_position);
            serializer.Write(this.actual_position);
            serializer.WriteLength(this.actual_velocity);
            serializer.Write(this.actual_velocity);
            serializer.WriteLength(this.actual_effort);
            serializer.Write(this.actual_effort);
            serializer.WriteLength(this.gravity_model_effort);
            serializer.Write(this.gravity_model_effort);
            serializer.WriteLength(this.gravity_only);
            serializer.Write(this.gravity_only);
            serializer.WriteLength(this.hysteresis_model_effort);
            serializer.Write(this.hysteresis_model_effort);
            serializer.WriteLength(this.crosstalk_model_effort);
            serializer.Write(this.crosstalk_model_effort);
            serializer.Write(this.hystState);
        }

        public override string ToString()
        {
            return "SEAJointStateMsg: " +
            "\nheader: " + header.ToString() +
            "\nname: " + System.String.Join(", ", name.ToList()) +
            "\ncommanded_position: " + System.String.Join(", ", commanded_position.ToList()) +
            "\ncommanded_velocity: " + System.String.Join(", ", commanded_velocity.ToList()) +
            "\ncommanded_acceleration: " + System.String.Join(", ", commanded_acceleration.ToList()) +
            "\ncommanded_effort: " + System.String.Join(", ", commanded_effort.ToList()) +
            "\nactual_position: " + System.String.Join(", ", actual_position.ToList()) +
            "\nactual_velocity: " + System.String.Join(", ", actual_velocity.ToList()) +
            "\nactual_effort: " + System.String.Join(", ", actual_effort.ToList()) +
            "\ngravity_model_effort: " + System.String.Join(", ", gravity_model_effort.ToList()) +
            "\ngravity_only: " + System.String.Join(", ", gravity_only.ToList()) +
            "\nhysteresis_model_effort: " + System.String.Join(", ", hysteresis_model_effort.ToList()) +
            "\ncrosstalk_model_effort: " + System.String.Join(", ", crosstalk_model_effort.ToList()) +
            "\nhystState: " + hystState.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}

//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.BaxterCore
{
    [Serializable]
    public class AssemblyStateMsg : Message
    {
        public const string k_RosMessageName = "baxter_core_msgs/AssemblyState";
        public override string RosMessageName => k_RosMessageName;

        public bool ready;
        //  true if enabled and ready to operate, e.g., not homing
        public bool enabled;
        //  true if enabled
        public bool stopped;
        //  true if stopped -- e-stop asserted
        public bool error;
        //  true if a component of the assembly has an error
        // 
        //  The following are specific to the robot top-level assembly:
        public byte estop_button;
        //  One of the following:
        public const byte ESTOP_BUTTON_UNPRESSED = 0; //  Robot is not stopped and button is not pressed
        public const byte ESTOP_BUTTON_PRESSED = 1;
        public const byte ESTOP_BUTTON_UNKNOWN = 2; //  STATE_UNKNOWN when estop was asserted by a non-user source
        public const byte ESTOP_BUTTON_RELEASED = 3; //  Was pressed, is now known to be released, but robot is still stopped.
        // 
        public byte estop_source;
        //  If stopped is true, the source of the e-stop.  One of the following:
        public const byte ESTOP_SOURCE_NONE = 0; //  e-stop is not asserted
        public const byte ESTOP_SOURCE_USER = 1; //  e-stop source is user input (the red button)
        public const byte ESTOP_SOURCE_UNKNOWN = 2; //  e-stop source is unknown
        public const byte ESTOP_SOURCE_FAULT = 3; //  MotorController asserted e-stop in response to a joint fault
        public const byte ESTOP_SOURCE_BRAIN = 4; //  MotorController asserted e-stop in response to a lapse of the brain heartbeat

        public AssemblyStateMsg()
        {
            this.ready = false;
            this.enabled = false;
            this.stopped = false;
            this.error = false;
            this.estop_button = 0;
            this.estop_source = 0;
        }

        public AssemblyStateMsg(bool ready, bool enabled, bool stopped, bool error, byte estop_button, byte estop_source)
        {
            this.ready = ready;
            this.enabled = enabled;
            this.stopped = stopped;
            this.error = error;
            this.estop_button = estop_button;
            this.estop_source = estop_source;
        }

        public static AssemblyStateMsg Deserialize(MessageDeserializer deserializer) => new AssemblyStateMsg(deserializer);

        private AssemblyStateMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.ready);
            deserializer.Read(out this.enabled);
            deserializer.Read(out this.stopped);
            deserializer.Read(out this.error);
            deserializer.Read(out this.estop_button);
            deserializer.Read(out this.estop_source);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.ready);
            serializer.Write(this.enabled);
            serializer.Write(this.stopped);
            serializer.Write(this.error);
            serializer.Write(this.estop_button);
            serializer.Write(this.estop_source);
        }

        public override string ToString()
        {
            return "AssemblyStateMsg: " +
            "\nready: " + ready.ToString() +
            "\nenabled: " + enabled.ToString() +
            "\nstopped: " + stopped.ToString() +
            "\nerror: " + error.ToString() +
            "\nestop_button: " + estop_button.ToString() +
            "\nestop_source: " + estop_source.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}

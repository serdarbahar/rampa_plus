//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.BaxterCore
{
    [Serializable]
    public class NavigatorStateMsg : Message
    {
        public const string k_RosMessageName = "baxter_core_msgs/NavigatorState";
        public override string RosMessageName => k_RosMessageName;

        //  buttons
        public string[] button_names;
        public bool[] buttons;
        //  wheel position
        public byte wheel;
        //  true if the light is on, false if not
        //  lights map to button names
        public string[] light_names;
        public bool[] lights;

        public NavigatorStateMsg()
        {
            this.button_names = new string[0];
            this.buttons = new bool[0];
            this.wheel = 0;
            this.light_names = new string[0];
            this.lights = new bool[0];
        }

        public NavigatorStateMsg(string[] button_names, bool[] buttons, byte wheel, string[] light_names, bool[] lights)
        {
            this.button_names = button_names;
            this.buttons = buttons;
            this.wheel = wheel;
            this.light_names = light_names;
            this.lights = lights;
        }

        public static NavigatorStateMsg Deserialize(MessageDeserializer deserializer) => new NavigatorStateMsg(deserializer);

        private NavigatorStateMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.button_names, deserializer.ReadLength());
            deserializer.Read(out this.buttons, sizeof(bool), deserializer.ReadLength());
            deserializer.Read(out this.wheel);
            deserializer.Read(out this.light_names, deserializer.ReadLength());
            deserializer.Read(out this.lights, sizeof(bool), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.button_names);
            serializer.Write(this.button_names);
            serializer.WriteLength(this.buttons);
            serializer.Write(this.buttons);
            serializer.Write(this.wheel);
            serializer.WriteLength(this.light_names);
            serializer.Write(this.light_names);
            serializer.WriteLength(this.lights);
            serializer.Write(this.lights);
        }

        public override string ToString()
        {
            return "NavigatorStateMsg: " +
            "\nbutton_names: " + System.String.Join(", ", button_names.ToList()) +
            "\nbuttons: " + System.String.Join(", ", buttons.ToList()) +
            "\nwheel: " + wheel.ToString() +
            "\nlight_names: " + System.String.Join(", ", light_names.ToList()) +
            "\nlights: " + System.String.Join(", ", lights.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
